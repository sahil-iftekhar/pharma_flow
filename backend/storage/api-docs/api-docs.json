{
    "openapi": "3.0.0",
    "info": {
        "title": "Pharma Flow API",
        "description": "API documentation for the Pharma Flow project",
        "contact": {
            "email": "support@example.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000"
        }
    ],
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Log in a user",
                "description": "Authenticates a user with email and password, and returns an access token.",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "secret123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Authentication token",
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        },
                                        "expires_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-31 23:59:59"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or incorrect credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "string",
                                            "example": "Credentials are incorrect."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Log out a user",
                "description": "Invalidates the current user's access token, effectively logging them out.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Successfully logged out."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "description": "Retrieves a list of all medicine categories.",
                "operationId": "getCategoriesList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Creates a new category. Requires admin privileges.",
                "operationId": "createCategory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Antibiotics"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User lacks admin privileges.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get category by ID",
                "description": "Retrieves a specific category by its ID.",
                "operationId": "getCategoryById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category",
                "description": "Updates an existing category. Requires admin privileges.",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Analgesics"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User lacks admin privileges.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "description": "Deletes a category by ID. Requires admin privileges.",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Category deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User lacks admin privileges.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/medicines": {
            "get": {
                "tags": [
                    "Medicines"
                ],
                "summary": "Get all medicines",
                "description": "Retrieves a list of all medicines with their categories.",
                "operationId": "getMedicinesList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Medicine"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Medicines"
                ],
                "summary": "Create a new medicine",
                "description": "Creates a new medicine and links it to categories. Requires admin privileges.",
                "operationId": "createMedicine",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "price",
                                    "dosage",
                                    "brand",
                                    "stock",
                                    "category_ids"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Paracetamol"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Fever and pain reducer.",
                                        "nullable": true
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 7.5
                                    },
                                    "dosage": {
                                        "type": "string",
                                        "example": "500mg"
                                    },
                                    "brand": {
                                        "type": "string",
                                        "example": "Panadol"
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "format": "url",
                                        "example": "http://example.com/paracetamol.jpg",
                                        "nullable": true
                                    },
                                    "stock": {
                                        "type": "integer",
                                        "example": 200
                                    },
                                    "category_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Medicine created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Medicine"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User lacks admin privileges.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/medicines/{id}": {
            "get": {
                "tags": [
                    "Medicines"
                ],
                "summary": "Get medicine by ID",
                "description": "Retrieves a specific medicine by its ID with its categories.",
                "operationId": "getMedicineById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the medicine",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Medicine"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Medicine not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Medicines"
                ],
                "summary": "Update a medicine",
                "description": "Updates an existing medicine. Requires admin privileges.",
                "operationId": "updateMedicine",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the medicine to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "New Aspirin"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 6.5
                                    },
                                    "category_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            3
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Medicine updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Medicine"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User lacks admin privileges.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Medicine not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Medicines"
                ],
                "summary": "Delete a medicine",
                "description": "Deletes a medicine by ID. Requires admin privileges.",
                "operationId": "deleteMedicine",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the medicine to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Medicine deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Medicine deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User lacks admin privileges.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Medicine not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/cart": {
            "get": {
                "tags": [
                    "Cart"
                ],
                "summary": "Get the authenticated user's cart items",
                "description": "Retrieves all items in the authenticated user's shopping cart.",
                "operationId": "getUserCart",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CartItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/cart/items/{id}": {
            "put": {
                "tags": [
                    "Cart"
                ],
                "summary": "Update a cart item's quantity",
                "description": "Updates the quantity of a specific cart item. Only the owner of the cart can update an item.",
                "operationId": "updateCartItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the cart item to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "quantity"
                                ],
                                "properties": {
                                    "quantity": {
                                        "type": "integer",
                                        "example": 5
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Cart item updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CartItem"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User is not authorized to update this item.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cart item not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Cart"
                ],
                "summary": "Delete a cart item",
                "description": "Deletes a specific cart item. Only the owner of the cart can delete the item.",
                "operationId": "deleteCartItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the cart item to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cart item deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Cart item deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User is not authorized to delete this item.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cart item not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a paginated list of all users",
                "description": "Retrieves a paginated list of all registered users. Requires admin privileges.",
                "operationId": "getUsersList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPagination"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to view all users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new company user",
                "description": "Registers a new user with the 'company' role. Sensitive fields like 'is_admin' and 'is_active' \n     * cannot be set by the client for this endpoint.",
                "operationId": "createUser",
                "requestBody": {
                    "description": "User registration data. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Jane",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "jane.doe@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "janedoe"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "456 Business Ave",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Operation completed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Unauthorized key (e.g., is_admin, is_active, role) provided by client.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "password": [
                                            "The password confirmation does not match."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user details by ID or slug",
                "description": "Retrieves the details of a specific user by their ID or slug. A user can view their own profile, or an admin can view any user's profile. Includes portfolio links if the user is a 'provider'.",
                "operationId": "getUserByIdOrSlug",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID or slug of the user to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        {
                                            "properties": {
                                                "portfolio_links": {
                                                    "description": "List of portfolio links for 'provider' users.",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/PortfolioLink"
                                                    },
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to view this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "description": "Deletes a user by their ID or slug. A user can delete their own account, or an admin can delete any user's account.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID or slug of the user to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: User deleted successfully."
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to delete this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update an existing user",
                "description": "Updates the details of an existing user. A user can update their own profile, or a super admin can update any user's profile.\n     * Sensitive fields like 'is_admin', 'is_active', and 'role' are ignored/discarded if sent in the request body, and 'password' is handled separately for updates.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID or slug of the user to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User data to update. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Updated Name",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Updated Lastname",
                                        "nullable": true
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "updateduser",
                                        "nullable": true
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "789 New Address",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "User updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to update this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "username": [
                                            "The username is already taken by another user."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/admin": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new admin user",
                "description": "Registers a new user with the 'admin' role and sets 'is_admin' to true. Requires super super admin privileges for the authenticated user. \n     * Sensitive fields like 'is_active' and 'role' ('admin') cannot be set by the client for this endpoint.",
                "operationId": "createAdminUser",
                "requestBody": {
                    "description": "Admin user registration data. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation",
                                    "is_admin",
                                    "role"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Admin",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "User",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "admin@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "adminuser"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "AdminPass123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "AdminPass123!"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "100 Admin Rd",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Operation completed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Unauthorized key (e.g., is_active, incorrect role) provided, or authenticated user lacks privileges to create an an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "password": [
                                            "The password confirmation does not match."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Category": {
                "title": "Category",
                "description": "Category model",
                "properties": {
                    "id": {
                        "description": "Category ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Category name",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "name": "Painkillers",
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z"
                }
            },
            "Medicine": {
                "title": "Medicine",
                "description": "Medicine model",
                "properties": {
                    "id": {
                        "description": "Medicine ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Name of the medicine",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the medicine",
                        "type": "string",
                        "nullable": true
                    },
                    "price": {
                        "description": "Price of the medicine",
                        "type": "number",
                        "format": "float"
                    },
                    "dosage": {
                        "description": "Dosage information",
                        "type": "string"
                    },
                    "brand": {
                        "description": "Brand of the medicine",
                        "type": "string"
                    },
                    "image_url": {
                        "description": "URL of the medicine's image",
                        "type": "string",
                        "format": "url",
                        "nullable": true
                    },
                    "stock": {
                        "description": "Current stock quantity",
                        "type": "integer"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "created_at": {
                        "description": "Timestamp of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "name": "Aspirin",
                    "description": "Pain relief medicine",
                    "price": 5.99,
                    "dosage": "500mg",
                    "brand": "Bayer",
                    "image_url": "http://example.com/aspirin.jpg",
                    "stock": 100,
                    "categories": [
                        {
                            "id": 1,
                            "name": "Painkillers"
                        }
                    ],
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z"
                }
            },
            "CartItem": {
                "title": "CartItem",
                "description": "Cart Item model",
                "properties": {
                    "id": {
                        "description": "Cart Item ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "cart_id": {
                        "description": "ID of the parent cart",
                        "type": "integer",
                        "format": "int64"
                    },
                    "medicine_id": {
                        "description": "ID of the medicine in the cart",
                        "type": "integer",
                        "format": "int64"
                    },
                    "quantity": {
                        "description": "Quantity of the medicine",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    },
                    "medicine": {
                        "$ref": "#/components/schemas/Medicine"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "cart_id": 1,
                    "medicine_id": 10,
                    "quantity": 2,
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z",
                    "medicine": {
                        "id": 10,
                        "name": "Ibuprofen"
                    }
                }
            },
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "description": "User ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "first_name": {
                        "description": "User's first name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "User's last name",
                        "type": "string"
                    },
                    "email": {
                        "description": "User's email address",
                        "type": "string",
                        "format": "email"
                    },
                    "username": {
                        "description": "User's unique username",
                        "type": "string"
                    },
                    "address": {
                        "description": "User's address",
                        "type": "string",
                        "nullable": true
                    },
                    "is_admin": {
                        "description": "Indicates if the user has admin privileges",
                        "type": "boolean"
                    },
                    "is_active": {
                        "description": "Indicates if the user account is active",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Timestamp of user creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "first_name": "John",
                    "last_name": "Doe",
                    "email": "john.doe@example.com",
                    "username": "johndoe",
                    "address": "123 Main St",
                    "is_admin": false,
                    "is_active": true,
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z"
                }
            },
            "UserPagination": {
                "title": "User Pagination",
                "description": "Paginated list of users",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    },
                    "links": {
                        "description": "Pagination links",
                        "type": "object"
                    },
                    "meta": {
                        "description": "Pagination meta information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PortfolioLink": {
                "title": "PortfolioLink",
                "description": "Portfolio link model",
                "properties": {
                    "id": {
                        "description": "ID of the portfolio link",
                        "type": "integer",
                        "format": "int64"
                    },
                    "provider_id": {
                        "description": "ID of the user (provider) who owns this link",
                        "type": "integer",
                        "format": "int64"
                    },
                    "link": {
                        "description": "The URL of the portfolio link",
                        "type": "string",
                        "format": "url"
                    },
                    "created_at": {
                        "description": "Timestamp when the portfolio link was created",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updated_at": {
                        "description": "Timestamp when the portfolio link was last updated",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ErrorResponse": {
                "title": "Error Response",
                "description": "Standard error response format for generic errors (e.g., 401, 403, 404, 500)",
                "properties": {
                    "errors": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "errors": "Something went wrong."
                }
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Categories",
            "description": "API Endpoints for Category Management"
        },
        {
            "name": "Medicines",
            "description": "API Endpoints for Medicine Management"
        },
        {
            "name": "Cart",
            "description": "API Endpoints for Cart Management"
        },
        {
            "name": "Users",
            "description": "API Endpoints for User Management"
        }
    ]
}